import test
from solution import next_states

@test.describe("Fixed Tests")
def fixed_tests():
    @test.it('Basic Test Cases')
    def basic_test_cases():
        test_cases = [
            ("MI", ["MIU", "MII"]),
            ("MIU", ["MIUIU"]),
            ("MUI" , ["MUIU", "MUIUI"]),
            ("MIIII", ["MIIIIU", "MIIIIIIII", "MUI", "MIU"]),
            ("MUUII", ["MUUIIU", "MUUIIUUII", "MII"]),
            ("MUUUI",["MUUUIU", "MUUUIUUUI", "MUI"]),
            
            ('MIIIIIIIIIIIIIIIIIIUIIIIIIIIIII', ['MIIIIIIIIIIIIIIIIIIUIIIIIIIIIIIU', 'MIIIIIIIIIIIIIIIIIIUIIIIIIIIIIIIIIIIIIIIIIIIIIIIIUIIIIIIIIIII', 'MUIIIIIIIIIIIIIIIUIIIIIIIIIII', 'MIUIIIIIIIIIIIIIIUIIIIIIIIIII', 'MIIUIIIIIIIIIIIIIUIIIIIIIIIII', 'MIIIUIIIIIIIIIIIIUIIIIIIIIIII', 'MIIIIUIIIIIIIIIIIUIIIIIIIIIII', 'MIIIIIUIIIIIIIIIIUIIIIIIIIIII', 'MIIIIIIUIIIIIIIIIUIIIIIIIIIII', 'MIIIIIIIUIIIIIIIIUIIIIIIIIIII', 'MIIIIIIIIUIIIIIIIUIIIIIIIIIII', 'MIIIIIIIIIUIIIIIIUIIIIIIIIIII', 'MIIIIIIIIIIUIIIIIUIIIIIIIIIII', 'MIIIIIIIIIIIUIIIIUIIIIIIIIIII', 'MIIIIIIIIIIIIUIIIUIIIIIIIIIII', 'MIIIIIIIIIIIIIUIIUIIIIIIIIIII', 'MIIIIIIIIIIIIIIUIUIIIIIIIIIII', 'MIIIIIIIIIIIIIIIUUIIIIIIIIIII', 'MIIIIIIIIIIIIIIIIIIUUIIIIIIII', 'MIIIIIIIIIIIIIIIIIIUIUIIIIIII', 'MIIIIIIIIIIIIIIIIIIUIIUIIIIII', 'MIIIIIIIIIIIIIIIIIIUIIIUIIIII', 'MIIIIIIIIIIIIIIIIIIUIIIIUIIII', 'MIIIIIIIIIIIIIIIIIIUIIIIIUIII', 'MIIIIIIIIIIIIIIIIIIUIIIIIIUII', 'MIIIIIIIIIIIIIIIIIIUIIIIIIIUI', 'MIIIIIIIIIIIIIIIIIIUIIIIIIIIU']),
            
            ('MIIIIIIII', ['MIIIIIIIIU', 'MIIIIIIIIIIIIIIII', 'MUIIIII', 'MIUIIII', 'MIIUIII', 'MIIIUII', 'MIIIIUI', 'MIIIIIU']),



            ('MUUIIIUIIII', ['MUUIIIUIIIIU', 'MUUIIIUIIIIUUIIIUIIII', 'MUUUUIIII', 'MUUIIIUUI', 'MUUIIIUIU', 'MIIIUIIII']),

            ('MIUIIIIIIIIIIIIU', ['MIUIIIIIIIIIIIIUIUIIIIIIIIIIIIU', 'MIUUIIIIIIIIIU', 'MIUIUIIIIIIIIU', 'MIUIIUIIIIIIIU', 'MIUIIIUIIIIIIU', 'MIUIIIIUIIIIIU', 'MIUIIIIIUIIIIU', 'MIUIIIIIIUIIIU', 'MIUIIIIIIIUIIU', 'MIUIIIIIIIIUIU', 'MIUIIIIIIIIIUU']),
            ('MIUIUIUIU',['MIUIUIUIUIUIUIUIU']),
            ('MIIUIIU',['MIIUIIUIIUIIU']),
            ('MUIIIUIIIUI',['MUIIIUIIIUIU', 'MUIIIUIIIUIUIIIUIIIUI', 'MUUUIIIUI', 'MUIIIUUUI']),
            ('MUIIIIIIIIIIUUIIIIIIIIIIU',['MUIIIIIIIIIIUUIIIIIIIIIIUUIIIIIIIIIIUUIIIIIIIIIIU', 'MUUIIIIIIIUUIIIIIIIIIIU', 'MUIUIIIIIIUUIIIIIIIIIIU', 'MUIIUIIIIIUUIIIIIIIIIIU', 'MUIIIUIIIIUUIIIIIIIIIIU', 'MUIIIIUIIIUUIIIIIIIIIIU', 'MUIIIIIUIIUUIIIIIIIIIIU', 'MUIIIIIIUIUUIIIIIIIIIIU', 'MUIIIIIIIUUUIIIIIIIIIIU', 'MUIIIIIIIIIIUUUIIIIIIIU', 'MUIIIIIIIIIIUUIUIIIIIIU', 'MUIIIIIIIIIIUUIIUIIIIIU', 'MUIIIIIIIIIIUUIIIUIIIIU', 'MUIIIIIIIIIIUUIIIIUIIIU', 'MUIIIIIIIIIIUUIIIIIUIIU', 'MUIIIIIIIIIIUUIIIIIIUIU', 'MUIIIIIIIIIIUUIIIIIIIUU', 'MUIIIIIIIIIIIIIIIIIIIIU']),
            ('MIIIIU',['MIIIIUIIIIU', 'MUIU', 'MIUU']),
            ('MUUIIU',['MUUIIUUUIIU', 'MIIU']),
            ('MUIUIU',['MUIUIUUIUIU']),
            ('MIIIIIIIIU',['MIIIIIIIIUIIIIIIIIU', 'MUIIIIIU', 'MIUIIIIU', 'MIIUIIIU', 'MIIIUIIU', 'MIIIIUIU', 'MIIIIIUU']),
            ('MIIU',['MIIUIIU']),
            ('MIIUU',['MIIUUIIUU', 'MII']),
            
        ]
        
        for string, expected in test_cases:
            test.assert_equals(next_states(string), expected)
